Title : Studying Git & Github

Difference between Git and GitHub
- Git: where we track files; distributed version control system
- Tracks every change of every file to the file history → You can go back in time
- Can watch whatever you want b/c git doesn't look at files as text but as binary code (0's and 1's).
- GitHub: git provider; where you upload and share your git files & changes (history)
- Not the only cloud git provider; Bitbucket and GitLab exist.
- Has the highest market share among the three biggest providers
* Git projects exist inside GitHub




Commit: record; point in time
- When you make a commit, you're basically setting the record in your git
Initial commit: the one GitHub Desktop makes when it creates a git repo
* Good practice: say what you did in the commit message (title: mandatory, description: not mandatory)
After you commit, you have no uncommitted changes in the repo
▣ : green (new file) --> yellow (modified)
What people usually do: when they make a big major change, they want to save the pointing in the git history


Git has 3 different areas
1) Working area: where you're working
2) Staging area: when a file is going to be committed
- By default, on GitHub Desktop, all the files go straight to the staging area
- Checkbox selected immediately --> going to be committed immediately
3) Repository (or commit) area: when the file has been committed and we have a snapshot of the commit info

Master: main branch (when you started)
Branch out of master: take all the history of master but make a branch from it
Branch: alternative timeline from the last commit
- Starting point: last point from the master
- Commit on the master
Update from default branch: in the alternative timeline, we want to update what happened
Merge into current branch: bring a branch from outside to the master branch
Then, delete the unnecessary branch(es) merged

<<<<<<< HEAD
first-branch
=======
what do you want??
>>>>>>> main
